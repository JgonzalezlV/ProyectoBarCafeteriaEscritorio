/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package ventanas;

import com.google.gson.JsonSyntaxException;
import controlador.Consultas;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.UnsupportedEncodingException;
import java.security.InvalidKeyException;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Base64;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.crypto.BadPaddingException;
import javax.crypto.Cipher;
import javax.crypto.IllegalBlockSizeException;
import javax.crypto.NoSuchPaddingException;
import javax.crypto.spec.SecretKeySpec;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;
import modelo.Usuario;
import utilidades.RespuestaJson;
import utilidades.ValidarDatos;

/**
 * Panel donde se gestionara a los usuarios registrados en la base de datos
 * @author Josu
 */
public class GestionUsuarios extends javax.swing.JPanel {

    private DefaultTableModel modeloTablaUsuarios = new DefaultTableModel();
    private TableRowSorter<TableModel> tablaOrdenada = new TableRowSorter<TableModel>(modeloTablaUsuarios);
    private TableColumn sportColumn;
    private final String claveEncriptacion = "secreto!";
        
    
    /**
     * Constructor del panel de gestion Usuarios
     * Creates new form GestionUsuarios
     */
    public GestionUsuarios() {
        initComponents();
        llenarModeloTablaUsuarios();
        listarUsuarios();
        llenarComboBox();
        txtTelefono.setEnabled(false);
        //tablaUsuarios.setRowSorter(tablaOrdenada);
        //sportColumn = tablaUsuarios.getColumnModel().getColumn(5);
        //sportColumn.setCellEditor(new DefaultCellEditor(comboBox));
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPopupMenu1 = new javax.swing.JPopupMenu();
        jMenuItemEliminar = new javax.swing.JMenuItem();
        jMenuItemModificar = new javax.swing.JMenuItem();
        jScrollPane2 = new javax.swing.JScrollPane();
        tablaUsuarios = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        txtUsuario = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        txtPassword = new javax.swing.JPasswordField();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        txtTelefono = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        comboBoxTipoUsuario = new javax.swing.JComboBox<>();
        txtNombre = new javax.swing.JTextField();
        txtApellidos = new javax.swing.JTextField();
        txtEmail = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        btnModificarUsuario = new javax.swing.JButton();
        btnEliminarUsuario = new javax.swing.JButton();
        btnInsertarUsuario = new javax.swing.JButton();
        btnNuevoUsuario = new javax.swing.JButton();

        jMenuItemEliminar.setText("jMenuItem1");
        jPopupMenu1.add(jMenuItemEliminar);

        jMenuItemModificar.setText("jMenuItem2");
        jPopupMenu1.add(jMenuItemModificar);

        setPreferredSize(new java.awt.Dimension(1000, 511));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        tablaUsuarios.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        tablaUsuarios.setFont(new java.awt.Font("Roboto", 0, 14)); // NOI18N
        tablaUsuarios.setModel(modeloTablaUsuarios);
        tablaUsuarios.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jScrollPane2.setViewportView(tablaUsuarios);

        add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 750, 480));

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(105, 56, 41)), "Datos", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Comic Sans MS", 2, 18))); // NOI18N

        jLabel1.setText("Usuario");

        jLabel3.setText("Password");

        jLabel4.setText("Nombre");

        jLabel5.setText("Apellidos");

        jLabel6.setText("Telefono");

        jLabel7.setText("TipoUsuario");

        jLabel2.setText("Email");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel7)
                        .addGap(104, 104, 104))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(txtNombre)
                                    .addComponent(txtUsuario))
                                .addGap(43, 43, 43))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtPassword, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel4))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 43, Short.MAX_VALUE)))
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(txtTelefono, javax.swing.GroupLayout.DEFAULT_SIZE, 144, Short.MAX_VALUE)
                                .addComponent(txtApellidos))
                            .addComponent(jLabel5)
                            .addComponent(comboBoxTipoUsuario, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(23, 23, 23))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel6)
                        .addGap(121, 121, 121))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(txtEmail, javax.swing.GroupLayout.PREFERRED_SIZE, 199, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtApellidos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtNombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel6)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtUsuario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtTelefono, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addComponent(jLabel7))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(comboBoxTipoUsuario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtEmail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(27, Short.MAX_VALUE))
        );

        add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(790, 20, 330, 260));

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(105, 56, 41)), "Operaciones", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Comic Sans MS", 2, 18))); // NOI18N

        btnModificarUsuario.setText("Modificar Usuario");
        btnModificarUsuario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnModificarUsuarioActionPerformed(evt);
            }
        });

        btnEliminarUsuario.setText("Eliminar Usuario");
        btnEliminarUsuario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarUsuarioActionPerformed(evt);
            }
        });

        btnInsertarUsuario.setText("Insertar Usuario");
        btnInsertarUsuario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnInsertarUsuarioActionPerformed(evt);
            }
        });

        btnNuevoUsuario.setText("Nuevo Usuario");
        btnNuevoUsuario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNuevoUsuarioActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(btnInsertarUsuario, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnNuevoUsuario, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnEliminarUsuario, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnModificarUsuario, javax.swing.GroupLayout.DEFAULT_SIZE, 308, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnNuevoUsuario, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnInsertarUsuario, javax.swing.GroupLayout.DEFAULT_SIZE, 36, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnEliminarUsuario, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnModificarUsuario, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20))
        );

        add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(790, 290, 330, 220));
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Metodo que modifica un usuario
     * @param evt 
     */
    private void btnModificarUsuarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnModificarUsuarioActionPerformed
        Usuario user = new Usuario(txtTelefono.getText());
        char[] Arraypassword = txtPassword.getPassword();
        String password = String.valueOf(Arraypassword);
        // Se comprueba si existe el telefono
        try {
            user = Consultas.existeUsuario("usuarios", user);
            // Si existe se crea otro usuario con los valores modificados
            Usuario userModificado = new Usuario(txtUsuario.getText(), txtNombre.getText(), txtApellidos.getText(), txtTelefono.getText(),txtEmail.getText() , String.valueOf(comboBoxTipoUsuario.getSelectedItem()));
            // Saltara el cuadro de confirmacion
            int eleccion = JOptionPane.showConfirmDialog(this,"¿Estas seguro de que quieres modificar el usuario?", "Confirmacion", JOptionPane.YES_NO_OPTION);
            // Si elige si se muestra el mensaje que responde el webservice
            if (eleccion == JOptionPane.YES_OPTION) {
                RespuestaJson respuestaJson = Consultas.actualizar("usuarios", userModificado);
                JOptionPane.showMessageDialog(this, respuestaJson.getValue(),"Información", JOptionPane.INFORMATION_MESSAGE);
                listarUsuarios();
                limpiarTextos();
            }
        } catch (JsonSyntaxException e) {
            // Si no esxiste el telefono en la bd saltaria este mensaje
            JOptionPane.showMessageDialog(this,"Usuario no registrado.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnModificarUsuarioActionPerformed

    /**
     * Metodo que elimina un usuario
     * @param evt 
     */
    private void btnEliminarUsuarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarUsuarioActionPerformed
        Usuario user = new Usuario(txtTelefono.getText());
        // Se comprueba si existe el telefono
        try {
            user = Consultas.existeUsuario("usuarios", user);
            // Si existe se crea otro usuario con el id que corresponde a ese telefono
            Usuario userEliminado = new Usuario(user.getIdUsuario());
            // Pinta el cuadro de confirmacion
            int eleccion = JOptionPane.showConfirmDialog(this,"¿Estas seguro de que quieres eliminar el usuario?", "Confirmacion", JOptionPane.YES_NO_OPTION);
            if (eleccion == JOptionPane.YES_OPTION) {
                RespuestaJson respuestaJson = Consultas.eliminar("usuarios", userEliminado);
                // Muestra el mensaje que manda el webservice
                JOptionPane.showMessageDialog(this, respuestaJson.getValue(),"Información", JOptionPane.INFORMATION_MESSAGE);
                listarUsuarios();
                limpiarTextos();
            }
        } catch (JsonSyntaxException e) {
            // Si no existe el telefono manda este mensaje
            JOptionPane.showMessageDialog(this,"Usuario no registrado.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnEliminarUsuarioActionPerformed

    /**
     * Metodo que inserta un usuario
     * @param evt 
     */
    private void btnInsertarUsuarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnInsertarUsuarioActionPerformed
        Usuario user = new Usuario(txtTelefono.getText());
        char[] pass = txtPassword.getPassword();
        String password = String.valueOf(pass);
        // Se comprueba si existe el telefono
        try {
            user = Consultas.existeUsuario("usuarios", user);
            // Si existe se mostraria el siguiente mensaje
            JOptionPane.showMessageDialog(this,"Telefono repetido", "Usuario ya registrado", JOptionPane.INFORMATION_MESSAGE);
        } catch (JsonSyntaxException e) {
            // Si no existe primero se comprueba la longitud del tele
            if (ValidarDatos.validarTelefono(txtTelefono.getText())) {
                // Si no existe se crea un usuario con los datos correspondientes
                Usuario userInsertar = new Usuario(txtUsuario.getText(), encriptar(password, claveEncriptacion), txtNombre.getText(), txtApellidos.getText(), txtTelefono.getText() ,txtEmail.getText(), String.valueOf(comboBoxTipoUsuario.getSelectedItem()));
                RespuestaJson respuestaJson = Consultas.insertar("usuarios",userInsertar);
                // Y se mostraria el mensaje 
                JOptionPane.showMessageDialog(this, respuestaJson.getValue(),"Información", JOptionPane.INFORMATION_MESSAGE);
                listarUsuarios();
                limpiarTextos();
            }else{
                // Si el telefono no es valido saltaria el siguiente mensaje
                JOptionPane.showMessageDialog(this,"Formato de telefono no valido", "Error", JOptionPane.ERROR_MESSAGE);
            } 
        }
    }//GEN-LAST:event_btnInsertarUsuarioActionPerformed

    /**
     * Metodo que permite escribir un nuevo usuario
     * @param evt 
     */
    private void btnNuevoUsuarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNuevoUsuarioActionPerformed
        // Limpia los textos y lleva el foco al texto del nombre para insertar un nuevo usuario
        limpiarTextos();
        txtNombre.requestFocus();
        txtTelefono.setEnabled(true);
    }//GEN-LAST:event_btnNuevoUsuarioActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnEliminarUsuario;
    private javax.swing.JButton btnInsertarUsuario;
    private javax.swing.JButton btnModificarUsuario;
    private javax.swing.JButton btnNuevoUsuario;
    private javax.swing.JComboBox<String> comboBoxTipoUsuario;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JMenuItem jMenuItemEliminar;
    private javax.swing.JMenuItem jMenuItemModificar;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPopupMenu jPopupMenu1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable tablaUsuarios;
    private javax.swing.JTextField txtApellidos;
    private javax.swing.JTextField txtEmail;
    private javax.swing.JTextField txtNombre;
    private javax.swing.JPasswordField txtPassword;
    private javax.swing.JTextField txtTelefono;
    private javax.swing.JTextField txtUsuario;
    // End of variables declaration//GEN-END:variables

    /**
     * Metodo para asignar los nombres a las columnas de la tabla
     */
    private void llenarModeloTablaUsuarios() {
        modeloTablaUsuarios.addColumn("Nombre");
        modeloTablaUsuarios.addColumn("Apellidos");
        modeloTablaUsuarios.addColumn("Telefono");
        modeloTablaUsuarios.addColumn("Usuario");
        modeloTablaUsuarios.addColumn("Password");
        modeloTablaUsuarios.addColumn("Email");
        modeloTablaUsuarios.addColumn("Tipo usuario");
        // Cada vez que se pulse en una fila u columna se podran en los campos los valores correspondientes
        tablaUsuarios.addMouseListener(new MouseAdapter() {
            @Override
            public void mousePressed(MouseEvent evt) {
                txtNombre.setText(tablaUsuarios.getValueAt(tablaUsuarios.getSelectedRow(), 0).toString());
                txtApellidos.setText(tablaUsuarios.getValueAt(tablaUsuarios.getSelectedRow(), 1).toString());
                txtTelefono.setText(tablaUsuarios.getValueAt(tablaUsuarios.getSelectedRow(), 2).toString());
                txtUsuario.setText(tablaUsuarios.getValueAt(tablaUsuarios.getSelectedRow(), 3).toString());
                txtPassword.setText(tablaUsuarios.getValueAt(tablaUsuarios.getSelectedRow(), 4).toString());
                txtEmail.setText(tablaUsuarios.getValueAt(tablaUsuarios.getSelectedRow(), 5).toString());
                comboBoxTipoUsuario.setSelectedItem(tablaUsuarios.getValueAt(tablaUsuarios.getSelectedRow(), 6).toString());
            }
        });
    }

    /**
     * Metodo que sirve para llenar de contenido la tabla
     */
    private void listarUsuarios() {
        // Aqui se limpia la tabla
        int numFilas = modeloTablaUsuarios.getRowCount();
        for (int i = 0; i < numFilas; i++) {
            modeloTablaUsuarios.removeRow(0);
        }
        // Y aqui se consulta a la base de datos
        ArrayList<Usuario> users = Consultas.ListarUsuarios();
        // Se recorre el arraylist anteriormente creado
        for (Usuario u : users) {
            // se van asignando los valores a un array de cadenas
            String datos[] = { u.getNombre(), u.getApellidos(), u.getTelefono(), u.getUsuario(), u.getPassword(),u.getEmail(), u.getTipoUsuario()};
            // y se agrega a la tabla.
            modeloTablaUsuarios.addRow(datos);
        }
    }

    /**
     * Metodo que limpia todos los campos
     */
    private void limpiarTextos() {
        txtUsuario.setText("");
        txtPassword.setText("");
        txtNombre.setText("");
        txtApellidos.setText("");
        txtTelefono.setText("");
        txtEmail.setText("");
        comboBoxTipoUsuario.setSelectedItem("");
    }
    
    /**
     * Metodo que llena el combo box
     */
    private void llenarComboBox(){
        comboBoxTipoUsuario.addItem("");
        comboBoxTipoUsuario.addItem("cliente");
        comboBoxTipoUsuario.addItem("trabajador");
    }
    
    /**
     * Crea la clave de encriptacion usada internamente
     * @param clave Clave que se usara para encriptar
     * @return Clave de encriptacion
     * @throws UnsupportedEncodingException
     * @throws NoSuchAlgorithmException 
     */
    private SecretKeySpec crearClave(String clave){
        SecretKeySpec secretKey = null;
        try {
            byte[] claveEncriptacion = clave.getBytes("UTF-8");  
            MessageDigest sha = MessageDigest.getInstance("SHA-1");
            claveEncriptacion = sha.digest(claveEncriptacion);
            claveEncriptacion = Arrays.copyOf(claveEncriptacion, 16);      
            secretKey = new SecretKeySpec(claveEncriptacion, "AES");  
        } catch (UnsupportedEncodingException ex) {
            Logger.getLogger(GestionUsuarios.class.getName()).log(Level.SEVERE, null, ex);
        } catch (NoSuchAlgorithmException ex) {
            Logger.getLogger(GestionUsuarios.class.getName()).log(Level.SEVERE, null, ex);
        }
        return secretKey;
    }

    /**
     * Aplica la encriptacion AES a la cadena de texto usando la clave indicada
     * @param datos Cadena a encriptar
     * @param claveSecreta Clave para encriptar
     * @return Información encriptada
     * @throws UnsupportedEncodingException
     * @throws NoSuchAlgorithmException
     * @throws InvalidKeyException
     * @throws NoSuchPaddingException
     * @throws IllegalBlockSizeException
     * @throws BadPaddingException 
     */
    public String encriptar(String datos, String claveSecreta) {
        String encriptado = "";
        try {
            SecretKeySpec secretKey = crearClave(claveSecreta);
            Cipher cipher = Cipher.getInstance("AES/ECB/PKCS5Padding");
            cipher.init(Cipher.ENCRYPT_MODE, secretKey);
            byte[] datosEncriptar = datos.getBytes("UTF-8");
            byte[] bytesEncriptados = cipher.doFinal(datosEncriptar);
            encriptado = Base64.getEncoder().encodeToString(bytesEncriptados);
        } catch (UnsupportedEncodingException ex) {
            Logger.getLogger(GestionUsuarios.class.getName()).log(Level.SEVERE, null, ex);
        } catch (NoSuchAlgorithmException ex) {
            Logger.getLogger(GestionUsuarios.class.getName()).log(Level.SEVERE, null, ex);
        } catch (NoSuchPaddingException ex) {
            Logger.getLogger(GestionUsuarios.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InvalidKeyException ex) {
            Logger.getLogger(GestionUsuarios.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalBlockSizeException ex) {
            Logger.getLogger(GestionUsuarios.class.getName()).log(Level.SEVERE, null, ex);
        } catch (BadPaddingException ex) {
            Logger.getLogger(GestionUsuarios.class.getName()).log(Level.SEVERE, null, ex);
        }
        return encriptado;
    }
}
