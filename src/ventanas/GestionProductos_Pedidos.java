/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package ventanas;

import controlador.Consultas;
import controlador.ConsultasPedidos;
import controlador.ConsultasProductos;
import controlador.ConsultasProductos_Pedidos;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import modelo.Pedido;
import modelo.Producto;
import modelo.Productos_Pedidos;
import modelo.Usuario;
import org.joda.time.DateTime;

/**
 *Panel donde se inserta productos en pedidos
 * @author Josu
 */
public class GestionProductos_Pedidos extends javax.swing.JPanel {

    private DefaultTableModel modeloTabla = new DefaultTableModel();
    private DefaultTableModel modeloTablaProductos = new DefaultTableModel();
    private DefaultTableModel modeloTablaPedidos = new DefaultTableModel();
    
    /**
     * Constructor del panel gestion productos_pedidos
     * Creates new form GestionProductos_Pedidos
     */
    public GestionProductos_Pedidos() {
        initComponents();
        llenarModeloTabla();
        listarProductos_Pedidos();
        llenarModeloProductos();
        llenarModeloPedidos();
        jSpinnerIdPP.setEnabled(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jScrollPane1 = new javax.swing.JScrollPane();
        tablaProductos_Pedidos = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        txtNombreProducto = new javax.swing.JTextField();
        jSpinnerIdPedido = new javax.swing.JSpinner();
        jSpinnerCantidadProducto = new javax.swing.JSpinner();
        jSpinnerIdPP = new javax.swing.JSpinner();
        jPanel2 = new javax.swing.JPanel();
        btnInsertar = new javax.swing.JButton();
        btnEliminar = new javax.swing.JButton();
        btnModificar = new javax.swing.JButton();
        btnNuevo = new javax.swing.JButton();
        btnActualizarProductos = new javax.swing.JButton();
        btnActulizarPedidos = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tablaPedidos = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        tablaProductos = new javax.swing.JTable();

        setLayout(new java.awt.GridBagLayout());

        tablaProductos_Pedidos.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        tablaProductos_Pedidos.setModel(modeloTabla);
        jScrollPane1.setViewportView(tablaProductos_Pedidos);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridheight = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 436;
        gridBagConstraints.ipady = 382;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(30, 6, 0, 0);
        add(jScrollPane1, gridBagConstraints);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(105, 56, 41)), "Datos", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Comic Sans MS", 2, 18))); // NOI18N

        jLabel1.setText("Id: ");

        jLabel2.setText("Id del pedido: ");

        jLabel3.setText("Nombre del producto: ");

        jLabel4.setText("Cantidad del producto: ");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSpinnerIdPP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jLabel4)
                        .addComponent(jLabel3)
                        .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel1))
                    .addComponent(txtNombreProducto, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jSpinnerIdPedido, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jSpinnerCantidadProducto, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(jLabel1)
                .addGap(26, 26, 26)
                .addComponent(jSpinnerIdPP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26)
                .addComponent(jLabel2)
                .addGap(14, 14, 14)
                .addComponent(jSpinnerIdPedido, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel3)
                .addGap(18, 18, 18)
                .addComponent(txtNombreProducto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(17, 17, 17)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSpinnerCantidadProducto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(22, Short.MAX_VALUE))
        );

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.ipady = 16;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(6, 23, 0, 17);
        add(jPanel1, gridBagConstraints);

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(105, 56, 41)), "Operaciones", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Comic Sans MS", 2, 18))); // NOI18N

        btnInsertar.setText("Insertar");
        btnInsertar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnInsertarActionPerformed(evt);
            }
        });

        btnEliminar.setText("Eliminar");
        btnEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarActionPerformed(evt);
            }
        });

        btnModificar.setText("Modificar");
        btnModificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnModificarActionPerformed(evt);
            }
        });

        btnNuevo.setText("Nuevo");
        btnNuevo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNuevoActionPerformed(evt);
            }
        });

        btnActualizarProductos.setText("Actualizar Productos");
        btnActualizarProductos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnActualizarProductosActionPerformed(evt);
            }
        });

        btnActulizarPedidos.setText("Actualizar Pedidos");
        btnActulizarPedidos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnActulizarPedidosActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnNuevo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnModificar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnActualizarProductos))
                .addGap(66, 66, 66)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnEliminar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnActulizarPedidos, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnInsertar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(68, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnNuevo)
                    .addComponent(btnInsertar))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnModificar)
                    .addComponent(btnEliminar))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnActualizarProductos)
                    .addComponent(btnActulizarPedidos))
                .addGap(0, 26, Short.MAX_VALUE))
        );

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridheight = 3;
        gridBagConstraints.ipadx = 62;
        gridBagConstraints.ipady = 26;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(17, 6, 6, 0);
        add(jPanel2, gridBagConstraints);

        jLabel7.setFont(new java.awt.Font("Segoe UI Black", 3, 36)); // NOI18N
        jLabel7.setText("Productos");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.ipadx = 9;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(6, 64, 0, 0);
        add(jLabel7, gridBagConstraints);

        jLabel8.setFont(new java.awt.Font("Segoe UI Black", 3, 36)); // NOI18N
        jLabel8.setText("Pedidos");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.ipady = -11;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(6, 196, 0, 0);
        add(jLabel8, gridBagConstraints);

        tablaPedidos.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        tablaPedidos.setModel(modeloTablaPedidos);
        jScrollPane2.setViewportView(tablaPedidos);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 519;
        gridBagConstraints.ipady = 50;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(6, 6, 0, 17);
        add(jScrollPane2, gridBagConstraints);

        tablaProductos.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        tablaProductos.setModel(modeloTablaProductos);
        jScrollPane3.setViewportView(tablaProductos);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 294;
        gridBagConstraints.ipady = 352;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(6, 12, 0, 0);
        add(jScrollPane3, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Metodo donde se inserta los productos en pedidos ya existentes
     * @param evt 
     */
    private void btnInsertarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnInsertarActionPerformed
        int id = (int) jSpinnerIdPP.getValue();
        int idPedido = (int) jSpinnerIdPedido.getValue();
        Producto producto = ConsultasProductos.existeProducto(txtNombreProducto.getText());
        // Ahora comprobamos si el id existe
        if (ConsultasProductos_Pedidos.existeProducto(id) == null) {
            // Miramos si existe el pedido
            if (ConsultasPedidos.existePedido(idPedido) != null) {
                // Comprobamos si existe el producto
                if (producto!= null) {
                    // Se inserta los productos en los pedidos
                    boolean insertado = ConsultasProductos_Pedidos.insertarProductos_Pedidos(id, idPedido, producto.getIdProducto(), (int) jSpinnerCantidadProducto.getValue());
                    if (insertado) {
                        JOptionPane.showMessageDialog(null, "Insertado correctamente", "Información", JOptionPane.INFORMATION_MESSAGE);
                        listarProductos_Pedidos();
                    }else{
                        JOptionPane.showMessageDialog(null, "Se ha producido un error", "Error", JOptionPane.ERROR_MESSAGE);
                    }
                    limpiarTextos();
                }else{
                    // Si el producto no existe
                    JOptionPane.showMessageDialog(null, "Producto no existe", "Error", JOptionPane.ERROR_MESSAGE);
                }
            }else{
                // Si el pedido no existe
                JOptionPane.showMessageDialog(null, "Pedido no existe", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }else{
            // Si el id ya esta registrado
            JOptionPane.showMessageDialog(null, "El id introducido ya existe", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnInsertarActionPerformed

    private void btnEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarActionPerformed
        // Guardamos el id 
        int id = (int) jSpinnerIdPP.getValue();
        // Comprobamos si existe dicho id en nuestra bd
        if (ConsultasProductos_Pedidos.existeProducto(id) != null) {
            // Si existe y seleccionas si, se borra
            int eleccion = JOptionPane.showConfirmDialog(this,"¿Estas seguro de que lo quieres eliminar?", "Confirmacion", JOptionPane.YES_NO_OPTION);
            if (eleccion == JOptionPane.YES_OPTION) {
                boolean eliminado = ConsultasProductos_Pedidos.eliminarProducto_Pedidos(id);
                if (eliminado) {
                    JOptionPane.showMessageDialog(null, "Eliminado correctamente", "Información", JOptionPane.INFORMATION_MESSAGE);
                    listarProductos_Pedidos();
                }else{
                    JOptionPane.showMessageDialog(null, "Se ha producido un error", "Error", JOptionPane.ERROR_MESSAGE);
                }
                limpiarTextos(); 
            }
        }else{
            // Si el id introducido no existe
            JOptionPane.showMessageDialog(null, "El id introducido no existe", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnEliminarActionPerformed

    private void btnModificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnModificarActionPerformed
        // Guardamos el id 
        int id = (int) jSpinnerIdPP.getValue();
        // Guardamos el id del pedido
        int idPedido = (int) jSpinnerIdPedido.getValue();
        // Comprobamos si existe el producto mediante su nombre
        Producto producto = ConsultasProductos.existeProducto(txtNombreProducto.getText());
        // Comprobamos si exite el idPP
        if (ConsultasProductos_Pedidos.existeProducto(id) != null) {
            // Si no existe, ahora se comprueba el id del pedido
            if (ConsultasPedidos.existePedido(idPedido) != null) {
                // Si producto es distinto que nulo 
                if (producto != null) {
                    // Te pedira la confirmacion de dicha operacion
                    int eleccion = JOptionPane.showConfirmDialog(this, "¿Estas seguro de que lo quieres modificar?", "Confirmacion", JOptionPane.YES_NO_OPTION);
                    if (eleccion == JOptionPane.YES_OPTION) {
                        // Si has pulsado en si, se modificara 
                        boolean modificado = ConsultasProductos_Pedidos.modificarProducto_Pedidos(id, idPedido, producto.getIdProducto(), (int) jSpinnerCantidadProducto.getValue());
                        if (!modificado) {
                            JOptionPane.showMessageDialog(null, "Modificado correctamente", "Información", JOptionPane.INFORMATION_MESSAGE);
                            listarProductos_Pedidos();
                        }else{
                            JOptionPane.showMessageDialog(null, "Se ha producido un error", "Error", JOptionPane.ERROR_MESSAGE);
                        }
                        limpiarTextos();
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "Producto no existe", "Error", JOptionPane.ERROR_MESSAGE);
                }
            } else {
                JOptionPane.showMessageDialog(null, "Pedido no existe", "Error", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(null, "El id introducido ya existe", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnModificarActionPerformed

    private void btnNuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNuevoActionPerformed
        limpiarTextos();
        // Creamos una variable para hacer el id automatico
        int ultimoIdPP = 0;
        // Listamos todos
        ArrayList<Productos_Pedidos> productos_pedidos = Consultas.ListarProductos_Pedidos();
        for (Productos_Pedidos productos_pedido : productos_pedidos) {
            ultimoIdPP = productos_pedido.getIdPP();
        }
        ultimoIdPP++;
        jSpinnerIdPP.setValue((int) ultimoIdPP);
    }//GEN-LAST:event_btnNuevoActionPerformed

    private void btnActualizarProductosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnActualizarProductosActionPerformed
        listarProductos();
    }//GEN-LAST:event_btnActualizarProductosActionPerformed

    private void btnActulizarPedidosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnActulizarPedidosActionPerformed
        listarPedidos();
    }//GEN-LAST:event_btnActulizarPedidosActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnActualizarProductos;
    private javax.swing.JButton btnActulizarPedidos;
    private javax.swing.JButton btnEliminar;
    private javax.swing.JButton btnInsertar;
    private javax.swing.JButton btnModificar;
    private javax.swing.JButton btnNuevo;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSpinner jSpinnerCantidadProducto;
    private javax.swing.JSpinner jSpinnerIdPP;
    private javax.swing.JSpinner jSpinnerIdPedido;
    private javax.swing.JTable tablaPedidos;
    private javax.swing.JTable tablaProductos;
    private javax.swing.JTable tablaProductos_Pedidos;
    private javax.swing.JTextField txtNombreProducto;
    // End of variables declaration//GEN-END:variables

    private void llenarModeloTabla() {
        modeloTabla.addColumn("Id");
        modeloTabla.addColumn("Id del pedido");
        modeloTabla.addColumn("Producto");
        modeloTabla.addColumn("Cantidad");
        tablaProductos_Pedidos.addMouseListener(new MouseAdapter() {
            @Override
            public void mousePressed(MouseEvent evt) {
                jSpinnerIdPP.setValue(Integer.parseInt(tablaProductos_Pedidos.getValueAt(tablaProductos_Pedidos.getSelectedRow(), 0).toString()));
                jSpinnerIdPedido.setValue(Integer.parseInt(tablaProductos_Pedidos.getValueAt(tablaProductos_Pedidos.getSelectedRow(), 1).toString()));
                txtNombreProducto.setText(tablaProductos_Pedidos.getValueAt(tablaProductos_Pedidos.getSelectedRow(), 2).toString());
                jSpinnerCantidadProducto.setValue(Integer.parseInt(tablaProductos_Pedidos.getValueAt(tablaProductos_Pedidos.getSelectedRow(), 3).toString()));
            }
        });
    }

    private void listarProductos_Pedidos() {
        int numFilas = modeloTabla.getRowCount();
        for (int i = 0; i < numFilas; i++) {
            modeloTabla.removeRow(0);
        }
        ArrayList<Productos_Pedidos> productos_pedidos = Consultas.ListarProductos_Pedidos();
        for (Productos_Pedidos p : productos_pedidos) {
            Producto producto = Consultas.existeProducto("productos",new Producto(p.getIdProducto()));
            String datos[] = {String.valueOf(p.getIdPP()),String.valueOf(p.getIdPedido()),producto.getNombreProducto(),String.valueOf(p.getCantidadProducto())};
            modeloTabla.addRow(datos);
        }
    }
    
    private void limpiarTextos(){
        jSpinnerIdPP.setValue((int) 0);
        jSpinnerIdPedido.setValue((int) 0);
        txtNombreProducto.setText("");
        jSpinnerCantidadProducto.setValue((int) 0);
    }

    private void llenarModeloProductos(){
        modeloTablaProductos.addColumn("Nombre");
        modeloTablaProductos.addColumn("Precio");
        int numFilas = modeloTablaProductos.getRowCount();
        for (int i = 0; i < numFilas; i++) {
            modeloTablaProductos.removeRow(0);
        }
        ArrayList<Producto> productos = Consultas.ListarProductos();
        for (Producto p : productos) {
            String datos[] = {p.getNombreProducto(),String.valueOf(p.getPrecioProducto())};
            modeloTablaProductos.addRow(datos);
        }
}
    
    private void listarProductos() {
        int numFilas = modeloTablaProductos.getRowCount();
        for (int i = 0; i < numFilas; i++) {
            modeloTablaProductos.removeRow(0);
        }
        ArrayList<Producto> productos = Consultas.ListarProductos();
        for (Producto p : productos) {
            String datos[] = {p.getNombreProducto(),String.valueOf(p.getPrecioProducto())};
            modeloTablaProductos.addRow(datos);
        }
    }
    
    private void llenarModeloPedidos(){
        modeloTablaPedidos.addColumn("Id del Pedido");
        modeloTablaPedidos.addColumn("Trabajador");
        modeloTablaPedidos.addColumn("Cliente");
        modeloTablaPedidos.addColumn("Estado");
        modeloTablaPedidos.addColumn("Fecha pedido");
        modeloTablaPedidos.addColumn("Hora pedido");
        
        String nombreTrabajador = null, nombreCliente = null;
        int numFilas = modeloTablaPedidos.getRowCount();
        for (int i = 0; i < numFilas; i++) {
            modeloTablaPedidos.removeRow(0);
        }
        // Guardamos la fecha de hoy
        DateTime fechaActual = DateTime.now();
        String fechaHoy = fechaActual.toString().substring(0, 10);
        ArrayList<Pedido> pedidos = ConsultasPedidos.listarTodosLosPedidos();
        ArrayList<Usuario> usuarios = Consultas.ListarUsuarios();
        for (Pedido p : pedidos) {
            if (fechaHoy.equalsIgnoreCase(String.valueOf(p.getFechaHoraPedido().toString().substring(0, 10)))) {
                for (Usuario u : usuarios) {
                    if (u.getIdUsuario() == p.getIdTrabajador()) {
                        nombreTrabajador = u.getNombre();
                    } else if (u.getIdUsuario() == p.getIdCliente()) {
                        nombreCliente = u.getNombre();
                    }
                }
                String datos[] = {String.valueOf(p.getIdPedido()), nombreTrabajador, nombreCliente, p.getEstadoPedido(), String.valueOf(p.getFechaHoraPedido().toString().substring(0, 10)), p.getFechaHoraPedido().toString().substring(11, 16)};
                modeloTablaPedidos.addRow(datos);
            }
            
        }
    }
    
    private void listarPedidos() {
        String nombreTrabajador = null, nombreCliente = null;
        int numFilas = modeloTablaPedidos.getRowCount();
        for (int i = 0; i < numFilas; i++) {
            modeloTablaPedidos.removeRow(0);
        }
        // Guardamos la fecha de hoy
        DateTime fechaActual = DateTime.now();
        String fechaHoy = fechaActual.toString().substring(0, 10);
        ArrayList<Pedido> pedidos = ConsultasPedidos.listarTodosLosPedidos();
        ArrayList<Usuario> usuarios = Consultas.ListarUsuarios();
        for (Pedido p : pedidos) {
            if (fechaHoy.equalsIgnoreCase(String.valueOf(p.getFechaHoraPedido().toString().substring(0, 10)))) {
                for (Usuario u : usuarios) {
                    if (u.getIdUsuario() == p.getIdTrabajador()) {
                        nombreTrabajador = u.getNombre();
                    } else if (u.getIdUsuario() == p.getIdCliente()) {
                        nombreCliente = u.getNombre();
                    }
                }
                String datos[] = {String.valueOf(p.getIdPedido()), nombreTrabajador, nombreCliente, p.getEstadoPedido(), String.valueOf(p.getFechaHoraPedido().toString().substring(0, 10)), p.getFechaHoraPedido().toString().substring(11, 16)};
            modeloTablaPedidos.addRow(datos);
            }
            
        }
    }
    
}
