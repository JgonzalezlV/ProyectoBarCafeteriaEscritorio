/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package ventanas;

import com.google.gson.JsonSyntaxException;
import controlador.Consultas;
import controlador.ConsultasReservas;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.sql.Date;
import java.sql.Time;
import java.sql.Timestamp;
import java.time.LocalDate;
import java.time.LocalTime;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import modelo.Cliente;
import modelo.Mesa;
import modelo.Reserva;
import modelo.Usuario;
import org.joda.time.DateTime;

/**
 * Panel donde se gestiona los datos de las reservas
 *
 * @author Josu
 */
public class GestionReservas extends javax.swing.JPanel {

    private DefaultTableModel modeloTablaReserva = new DefaultTableModel();
    private DefaultTableModel modeloTablaClientes = new DefaultTableModel();

    /**
     * Constructor del panel de gestion reservas 
     * Creates new form GestionReservas
     */
    public GestionReservas() {
        initComponents();
        llenarTablaReservas();
        listarReservas();
        llenarModeloClientes();
        llenarComboBox();
        jSpinnerIdReserva.setEnabled(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tablaReservas = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jSpinnerIdReserva = new javax.swing.JSpinner();
        jSpinnerNumMesa = new javax.swing.JSpinner();
        datePickerFecha = new com.github.lgooddatepicker.components.DatePicker();
        timePickerHora = new com.github.lgooddatepicker.components.TimePicker();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        txtNombreCliente = new javax.swing.JTextField();
        txtApellidosCliente = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jComboBoxEstadoReserva = new javax.swing.JComboBox<>();
        jLabel7 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tablaClientes = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        btnInsertarReserva = new javax.swing.JButton();
        btnEliminarReserva = new javax.swing.JButton();
        btnModificarReserva = new javax.swing.JButton();
        btnNuevaReserva = new javax.swing.JButton();
        jButtonMostrar = new javax.swing.JButton();
        jButtonMostrarTodas = new javax.swing.JButton();
        btnActualizarCliente = new javax.swing.JButton();

        tablaReservas.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        tablaReservas.setModel(modeloTablaReserva);
        jScrollPane1.setViewportView(tablaReservas);

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(105, 56, 41)), "Datos", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Comic Sans MS", 2, 18))); // NOI18N

        jLabel1.setText("IdReserva: ");

        jLabel2.setText("Nombre del cliente:");

        jLabel3.setText("NÃºmero de la mesa reservada: ");

        jLabel4.setText("Fecha de la reserva: ");

        jLabel5.setText("Hora de la reserva: ");

        jLabel6.setText("Apellidos del cliente:");

        jLabel8.setText("Estado: ");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jLabel1)
                                .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(txtNombreCliente))
                            .addComponent(jLabel6))
                        .addGap(61, 61, 61)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4)
                            .addComponent(datePickerFecha, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(txtApellidosCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(33, 33, 33)
                                .addComponent(jSpinnerNumMesa, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jSpinnerIdReserva, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(timePickerHora, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel5))
                                .addGap(53, 53, 53)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel8)
                                    .addComponent(jComboBoxEstadoReserva, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(140, 140, 140))))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel5)
                    .addComponent(jLabel8))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jSpinnerIdReserva, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(timePickerHora, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBoxEstadoReserva, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(4, 4, 4)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtNombreCliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(datePickerFecha, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(jLabel3))
                .addGap(7, 7, 7)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtApellidosCliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jSpinnerNumMesa, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(56, 56, 56))
        );

        jLabel7.setText("Clientes");
        jLabel7.setFont(new java.awt.Font("Segoe UI Black", 3, 36)); // NOI18N

        tablaClientes.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        tablaClientes.setModel(modeloTablaClientes);
        jScrollPane2.setViewportView(tablaClientes);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(105, 56, 41)), "Operaciones", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Comic Sans MS", 2, 18))); // NOI18N

        btnInsertarReserva.setText("Insertar Reserva");
        btnInsertarReserva.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnInsertarReservaActionPerformed(evt);
            }
        });

        btnEliminarReserva.setText("Eliminar Reserva");
        btnEliminarReserva.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarReservaActionPerformed(evt);
            }
        });

        btnModificarReserva.setText("Modificar Reserva");
        btnModificarReserva.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnModificarReservaActionPerformed(evt);
            }
        });

        btnNuevaReserva.setText("Nueva Reserva");
        btnNuevaReserva.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNuevaReservaActionPerformed(evt);
            }
        });

        jButtonMostrar.setText("Mostrar Reservas Hoy");
        jButtonMostrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonMostrarActionPerformed(evt);
            }
        });

        jButtonMostrarTodas.setText("Mostrar Todas");
        jButtonMostrarTodas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonMostrarTodasActionPerformed(evt);
            }
        });

        btnActualizarCliente.setText("Actualizar Clientes");
        btnActualizarCliente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnActualizarClienteActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnNuevaReserva, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnModificarReserva, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnEliminarReserva, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnInsertarReserva, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButtonMostrar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jButtonMostrarTodas, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnActualizarCliente)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnNuevaReserva)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnInsertarReserva)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnEliminarReserva)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnModificarReserva)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonMostrar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButtonMostrarTodas)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(btnActualizarCliente)
                        .addContainerGap())))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(39, 39, 39)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 675, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(17, 17, 17)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 421, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(145, 145, 145)
                        .addComponent(jLabel7)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addGap(59, 59, 59))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 491, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 310, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))))
        );
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Metodo que modifica una reserva
     *
     * @param evt
     */
    private void btnModificarReservaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnModificarReservaActionPerformed
        // TODO add your handling code here:
        int id = (int) jSpinnerIdReserva.getValue();
        try {
            Usuario user = Consultas.existeUsuario(new Usuario(txtNombreCliente.getText(), txtApellidosCliente.getText(), ""));
            // Conseguimos los datos completos del cliente mediante el nombre y los apellidos
            int numMesa = (int) jSpinnerNumMesa.getValue();
            String fechaReserva = Date.valueOf(datePickerFecha.getDate()).toString();
            String horaReserva = Time.valueOf(timePickerHora.getTime()).toString();
            String fechaHoraReserva = fechaReserva.concat(" " + horaReserva);
            // Conseguimos la fecha junto a la hora
            if (ConsultasReservas.existeReserva(id) != null) {
                // Se comprueba si existe ese id de reserva
                try {
                    // Si existe se comprobara el cliente
                    Consultas.existeCliente("clientes", new Cliente(user.getIdUsuario()));
                    // Se comprueba tambien si existe la mesa
                    if (Consultas.existeMesa("mesas", new Mesa(numMesa)) != null) {
                        // Tambien comprobamos si esa mesa esta reservada ya a ese dia y hora
                        if (ConsultasReservas.existeReserva(numMesa, Timestamp.valueOf(fechaHoraReserva)) == null) {
                            // Si no esta reservada en esa fecha/hora se modifica
                            int eleccion = JOptionPane.showConfirmDialog(this,"Â¿Estas seguro de que quieres modificar la reserva?", "Confirmacion", JOptionPane.YES_NO_OPTION);
                            if (eleccion == JOptionPane.YES_OPTION) {
                                ConsultasReservas.modificarReserva(id, user.getIdUsuario(), numMesa, jComboBoxEstadoReserva.getSelectedItem().toString() ,Timestamp.valueOf(fechaHoraReserva));
                                listarReservas();
                                limpiarTextos();
                            }
                        } else {
                            // Si no saldra este mensaje
                            JOptionPane.showMessageDialog(null, "Mesa ya reservada a esa fecha y hora");
                        }
                    } else {
                        // Si no saldra este mensaje
                        JOptionPane.showMessageDialog(null, "Mesa no registrada");
                    }
                } catch (JsonSyntaxException e) {
                    // Si no saldra este mensaje
                    JOptionPane.showMessageDialog(null, "Cliente no registrado");
                }
            } else {
                // Si no saldra este mensaje
                JOptionPane.showMessageDialog(null, "Reserva no registrada");
            }
        } catch (JsonSyntaxException e) {
            // Si no saldra este mensaje
            JOptionPane.showMessageDialog(null, "Usuario no registrado");
        }
    }//GEN-LAST:event_btnModificarReservaActionPerformed

    /**
     * Metodo que inserta una reserva
     *
     * @param evt
     */
    private void btnInsertarReservaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnInsertarReservaActionPerformed
        // TODO add your handling code here:
        int id = (int) jSpinnerIdReserva.getValue();
        String fechaReserva = Date.valueOf(datePickerFecha.getDate()).toString();
        String horaReserva = Time.valueOf(timePickerHora.getTime()).toString();
        String fechaHoraReserva = fechaReserva.concat(" " + horaReserva);
        // Conseguimos la fecha junto a la hora
        try {
            Usuario user = Consultas.existeUsuario(new Usuario(txtNombreCliente.getText(), txtApellidosCliente.getText(), ""));
            // Conseguimos los datos completos del cliente mediante el nombre y los apellidos
            int numMesa = (int) jSpinnerNumMesa.getValue();
            // Se comprueba si existe ese id de reserva
            if (ConsultasReservas.existeReserva(id) == null) {
                // Tambien comprobamos si esa mesa esta reservada ya a ese dia y hora
                if (ConsultasReservas.existeReserva(numMesa, Timestamp.valueOf(fechaHoraReserva)) == null) {
                    // Se comprueba tambien si existe la mesa
                    if (Consultas.existeMesa("mesas", new Mesa(numMesa)) != null) {
                        // Si entra en todos los if se insertara la reserva
                        ConsultasReservas.insertarReserva(id, user.getIdUsuario(), numMesa, jComboBoxEstadoReserva.getSelectedItem().toString() ,Timestamp.valueOf(fechaHoraReserva));
                        listarReservas();
                        limpiarTextos();
                    } else {
                        JOptionPane.showMessageDialog(null, "Mesa no registrada");
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "Mesa ya reservada a esa fecha y hora");
                }
            } else {
                JOptionPane.showMessageDialog(null, "Reserva ya registrada");
            }
        } catch (JsonSyntaxException e) {
            JOptionPane.showMessageDialog(null, "Usuario no registrado");
        }
    }//GEN-LAST:event_btnInsertarReservaActionPerformed

    /**
     * Metodo que elimina una reserva
     *
     * @param evt
     */
    private void btnEliminarReservaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarReservaActionPerformed
        // TODO add your handling code here:
        int id = (int) jSpinnerIdReserva.getValue();
        // Obtenemos el id de la reserva que se quiere suprimir
        if (ConsultasReservas.existeReserva(id) != null) {
            // Si existe se elimina
            int eleccion = JOptionPane.showConfirmDialog(this,"Â¿Estas seguro de que quieres eliminar la reserva?", "Confirmacion", JOptionPane.YES_NO_OPTION);
            if (eleccion == JOptionPane.YES_OPTION) {
                ConsultasReservas.eliminarReserva(id);
                listarReservas();
                limpiarTextos();    
            }
        } else {
            JOptionPane.showMessageDialog(null, "Reserva no registrada");
        }
    }//GEN-LAST:event_btnEliminarReservaActionPerformed

    /**
     * Metodo que permite escribir una nueva reserva
     *
     * @param evt
     */
    private void btnNuevaReservaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNuevaReservaActionPerformed
        limpiarTextos();
        // Creamos una variable para hacer el id de la reserva automatico
        int ultimoIdReserva = 0;
        // Listamos todas las reservas 
        ArrayList<Reserva> reservas = ConsultasReservas.listarTodosLasReservas();
        for (Reserva reserva : reservas) {
            // Por cada reserva la varible va incrementandose
            ultimoIdReserva = reserva.getIdReserva();
        }
        // Y para tener el siguiente id de reserva 
        ultimoIdReserva++;
        // Y le damos el valor al spinner
        jSpinnerIdReserva.setValue((int) ultimoIdReserva);
        txtNombreCliente.requestFocus();
    }//GEN-LAST:event_btnNuevaReservaActionPerformed

    private void jButtonMostrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonMostrarActionPerformed
        listarReservasDiarias();
    }//GEN-LAST:event_jButtonMostrarActionPerformed

    private void jButtonMostrarTodasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonMostrarTodasActionPerformed
        listarReservas();
    }//GEN-LAST:event_jButtonMostrarTodasActionPerformed

    private void btnActualizarClienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnActualizarClienteActionPerformed
        listarClientes();
    }//GEN-LAST:event_btnActualizarClienteActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnActualizarCliente;
    private javax.swing.JButton btnEliminarReserva;
    private javax.swing.JButton btnInsertarReserva;
    private javax.swing.JButton btnModificarReserva;
    private javax.swing.JButton btnNuevaReserva;
    private com.github.lgooddatepicker.components.DatePicker datePickerFecha;
    private javax.swing.JButton jButtonMostrar;
    private javax.swing.JButton jButtonMostrarTodas;
    private javax.swing.JComboBox<String> jComboBoxEstadoReserva;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSpinner jSpinnerIdReserva;
    private javax.swing.JSpinner jSpinnerNumMesa;
    private javax.swing.JTable tablaClientes;
    private javax.swing.JTable tablaReservas;
    private com.github.lgooddatepicker.components.TimePicker timePickerHora;
    private javax.swing.JTextField txtApellidosCliente;
    private javax.swing.JTextField txtNombreCliente;
    // End of variables declaration//GEN-END:variables

    /**
     * Metodo para nombrar las columnas de la tabla
     */
    private void llenarTablaReservas() {
        // Damos nombre a la columnas de la tabla
        modeloTablaReserva.addColumn("IdReserva");
        modeloTablaReserva.addColumn("NombreCliente");
        modeloTablaReserva.addColumn("ApellidosCliente");
        modeloTablaReserva.addColumn("NumMesa");
        modeloTablaReserva.addColumn("EstadoReserva");
        modeloTablaReserva.addColumn("FechaReserva");
        modeloTablaReserva.addColumn("HoraReserva");
        // Cada vez que se pulse en una fila se rellenaran los campos correspondientes
        tablaReservas.addMouseListener(new MouseAdapter() {
            @Override
            public void mousePressed(MouseEvent evt) {
                jSpinnerIdReserva.setValue(Integer.parseInt(tablaReservas.getValueAt(tablaReservas.getSelectedRow(), 0).toString()));
                txtNombreCliente.setText(tablaReservas.getValueAt(tablaReservas.getSelectedRow(), 1).toString());
                txtApellidosCliente.setText(tablaReservas.getValueAt(tablaReservas.getSelectedRow(), 2).toString());
                jSpinnerNumMesa.setValue(Integer.parseInt(tablaReservas.getValueAt(tablaReservas.getSelectedRow(), 3).toString()));
                jComboBoxEstadoReserva.setSelectedItem(tablaReservas.getValueAt(tablaReservas.getSelectedRow(), 4).toString());
                datePickerFecha.setDate(LocalDate.parse(tablaReservas.getValueAt(tablaReservas.getSelectedRow(), 5).toString()));
                timePickerHora.setTime(LocalTime.parse(tablaReservas.getValueAt(tablaReservas.getSelectedRow(), 6).toString()));
            }
        });
    }

    /**
     * Metodo que lista todas las reservas.
     */
    private void listarReservas() {
        // Limpiamos la tabla
        int numFilas = modeloTablaReserva.getRowCount();
        for (int i = 0; i < numFilas; i++) {
            modeloTablaReserva.removeRow(0);
        }
        // Listamos las reservas y los usuarios
        ArrayList<Reserva> reservas = ConsultasReservas.listarTodosLasReservas();
        ArrayList<Usuario> usuarios = Consultas.ListarUsuarios();
        for (Reserva r : reservas) {
            for (Usuario u : usuarios) {
                // Si el id del usuario es el mismo que el del cliente
                if (r.getIdCliente() == u.getIdUsuario()) {
                        String datos[] = {String.valueOf(r.getIdReserva()), u.getNombre(), u.getApellidos(), String.valueOf(r.getNumMesa()),r.getEstado(), String.valueOf(r.getFechaHoraReserva().toString().subSequence(0, 10)), String.valueOf(r.getFechaHoraReserva().toString().substring(11, 16))};
                        modeloTablaReserva.addRow(datos);
                }
            }
        }
    }

    /**
     * Metodo para limpiar los campos
     */
    private void limpiarTextos() {
        jSpinnerIdReserva.setValue((int) 0);
        txtNombreCliente.setText("");
        txtApellidosCliente.setText("");
        jSpinnerNumMesa.setValue((int) 0);
        jComboBoxEstadoReserva.setSelectedIndex(0);
        datePickerFecha.setDate(LocalDate.now());
        timePickerHora.setTime(LocalTime.now());
    }

    /**
     * 
     */
    private void llenarModeloClientes(){
        // Damos nombres a las columnas de la tabla
        modeloTablaClientes.addColumn("Nombre");
        modeloTablaClientes.addColumn("Apellidos");
        modeloTablaClientes.addColumn("Telefono");
        modeloTablaClientes.addColumn("Descuento");
        // Limpiamos la tabla
        int id = 0;
        int numFilas = modeloTablaClientes.getRowCount();
        for (int i = 0; i < numFilas; i++) {
            modeloTablaClientes.removeRow(0);
        }
        // Listamos los usuarios y clientes
        ArrayList<Usuario> users = Consultas.ListarUsuarios();
        ArrayList<Cliente> clientes = Consultas.ListarClientes();
        for (Usuario u : users) {
            id = u.getIdUsuario();
            for (Cliente c : clientes) {
                // Si el id del usuario es el mismo que el del clientes se insertaria en la tabla
                if (id == c.getIdCliente()) {
                    String datos[] = {u.getNombre(), u.getApellidos(), u.getTelefono(), String.valueOf(c.getDescuento())};
                    modeloTablaClientes.addRow(datos);
                }
            }
        }
    }
    
    /**
     * Metodo que lista a los clientes registrados en la base de datos.
     */
    private void listarClientes() {
        // Limpiamos la tabla
        int id = 0;
        int numFilas = modeloTablaClientes.getRowCount();
        for (int i = 0; i < numFilas; i++) {
            modeloTablaClientes.removeRow(0);
        }
        // Listamos los usuarios y clientes
        ArrayList<Usuario> users = Consultas.ListarUsuarios();
        ArrayList<Cliente> clientes = Consultas.ListarClientes();
        for (Usuario u : users) {
            id = u.getIdUsuario();
            for (Cliente c : clientes) {
                // Si el id del usuario es el mismo que el del clientes se insertaria en la tabla
                if (id == c.getIdCliente()) {
                    String datos[] = {u.getNombre(), u.getApellidos(), u.getTelefono(), String.valueOf(c.getDescuento())};
                    modeloTablaClientes.addRow(datos);
                }
            }
        }
    }

    /**
     * Metodo que llena el combo box
     */
    private void llenarComboBox(){
        jComboBoxEstadoReserva.addItem("");
        jComboBoxEstadoReserva.addItem("Confirmada");
        jComboBoxEstadoReserva.addItem("Sin confirmar");
        jComboBoxEstadoReserva.addItem("Cancelada");
    }
    
    /**
     * Metodo que muestra solo las reservas del dia en el te encuentras
     */
    private void listarReservasDiarias(){
        // Limpiamos la tabla
        int numFilas = modeloTablaReserva.getRowCount();
        for (int i = 0; i < numFilas; i++) {
            modeloTablaReserva.removeRow(0);
        }
        // Guardamos la fecha de hoy
        DateTime fechaActual = DateTime.now();
        String fechaHoy = fechaActual.toString().substring(0, 10);
        // Listamos las reservas y los usuarios
        ArrayList<Reserva> reservas = ConsultasReservas.listarTodosLasReservas();
        ArrayList<Usuario> usuarios = Consultas.ListarUsuarios();
        for (Reserva r : reservas) {
            for (Usuario u : usuarios) {
                if (r.getIdCliente() == u.getIdUsuario()) {
                    // Comprobamos si la fecha de la reserva concuerda con la fecha actual
                    // si es asi se muestra en la tabla
                    if (fechaHoy.equalsIgnoreCase(String.valueOf(r.getFechaHoraReserva().toString().substring(0, 10)))) {
                        String datos[] = {String.valueOf(r.getIdReserva()), u.getNombre(), u.getApellidos(), String.valueOf(r.getNumMesa()),r.getEstado(), String.valueOf(r.getFechaHoraReserva().toString().substring(0, 10)), String.valueOf(r.getFechaHoraReserva().toString().substring(11, 16))};
                        modeloTablaReserva.addRow(datos);
                    }
                }
            }
        }
    }
    
}
