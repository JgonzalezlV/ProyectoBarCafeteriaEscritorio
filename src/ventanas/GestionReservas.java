/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package ventanas;

import com.google.gson.JsonSyntaxException;
import controlador.Consultas;
import controlador.ConsultasReservas;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.sql.Date;
import java.sql.Time;
import java.sql.Timestamp;
import java.time.LocalDate;
import java.time.LocalTime;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import modelo.Cliente;
import modelo.Mesa;
import modelo.Reserva;
import modelo.Usuario;

/**
 *
 * @author Josu
 */
public class GestionReservas extends javax.swing.JPanel {

    private DefaultTableModel modeloTablaReserva = new DefaultTableModel();
    private DefaultTableModel modeloTablaClientes = new DefaultTableModel();

    /**
     * Creates new form GestionReservas
     */
    public GestionReservas() {
        initComponents();
        llenarTablaReservas();
        listarReservas();
        listarClientes();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jScrollPane1 = new javax.swing.JScrollPane();
        tablaReservas = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jSpinnerIdReserva = new javax.swing.JSpinner();
        jSpinnerNumMesa = new javax.swing.JSpinner();
        datePickerFecha = new com.github.lgooddatepicker.components.DatePicker();
        timePickerHora = new com.github.lgooddatepicker.components.TimePicker();
        jLabel5 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        btnInsertarReserva = new javax.swing.JButton();
        btnEliminarReserva = new javax.swing.JButton();
        btnModificarReserva = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        txtNombreCliente = new javax.swing.JTextField();
        txtApellidosCliente = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tablaClientes = new javax.swing.JTable();

        setLayout(new java.awt.GridBagLayout());

        tablaReservas.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        tablaReservas.setModel(modeloTablaReserva);
        jScrollPane1.setViewportView(tablaReservas);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 593;
        gridBagConstraints.ipady = 238;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(12, 39, 0, 0);
        add(jScrollPane1, gridBagConstraints);

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(105, 56, 41)), "Datos", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Comic Sans MS", 2, 18))); // NOI18N

        jLabel1.setText("IdReserva: ");

        jLabel2.setText("Nombre del cliente:");

        jLabel3.setText("NÃºmero de la mesa reservada: ");

        jLabel4.setText("Fecha de la reserva: ");

        jLabel5.setText("Hora de la reserva: ");

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(105, 56, 41)), "Operaciones", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Comic Sans MS", 2, 18))); // NOI18N

        btnInsertarReserva.setText("Insertar Reserva");
        btnInsertarReserva.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnInsertarReservaActionPerformed(evt);
            }
        });

        btnEliminarReserva.setText("Eliminar Rerserva");
        btnEliminarReserva.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarReservaActionPerformed(evt);
            }
        });

        btnModificarReserva.setText("Modificar Reserva");
        btnModificarReserva.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnModificarReservaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnModificarReserva, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnEliminarReserva, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnInsertarReserva, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(16, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnInsertarReserva)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnEliminarReserva)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnModificarReserva)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jLabel6.setText("Apellidos del cliente:");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jSpinnerIdReserva, javax.swing.GroupLayout.DEFAULT_SIZE, 118, Short.MAX_VALUE)
                        .addGap(103, 103, 103)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(jLabel5)
                                .addComponent(timePickerHora, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel4))
                        .addGap(35, 35, 35))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel6)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel3))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(txtApellidosCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jSpinnerNumMesa, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(12, 12, 12))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(txtNombreCliente))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(datePickerFecha, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(38, 38, 38))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(14, 14, 14)
                                .addComponent(jLabel1))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jLabel5)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jSpinnerIdReserva, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(timePickerHora, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(4, 4, 4)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(jLabel4))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtNombreCliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(datePickerFecha, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6)
                            .addComponent(jLabel3)))
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtApellidosCliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jSpinnerNumMesa, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(21, Short.MAX_VALUE))
        );

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.ipadx = 54;
        gridBagConstraints.ipady = 15;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(18, 39, 6, 0);
        add(jPanel2, gridBagConstraints);

        jLabel7.setText("Clientes");
        jLabel7.setFont(new java.awt.Font("Segoe UI Black", 3, 36)); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(6, 147, 0, 0);
        add(jLabel7, gridBagConstraints);

        tablaClientes.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        tablaClientes.setModel(modeloTablaClientes);
        jScrollPane2.setViewportView(tablaClientes);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.gridheight = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 436;
        gridBagConstraints.ipady = 419;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(12, 6, 6, 7);
        add(jScrollPane2, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    private void btnModificarReservaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnModificarReservaActionPerformed
        // TODO add your handling code here:
        int id = (int) jSpinnerIdReserva.getValue();
        try {
            Usuario user = Consultas.existeUsuario(new Usuario(txtNombreCliente.getText(), txtApellidosCliente.getText(), ""));
            int numMesa = (int) jSpinnerNumMesa.getValue();
            String fechaReserva = Date.valueOf(datePickerFecha.getDate()).toString();
            String horaReserva = Time.valueOf(timePickerHora.getTime()).toString();
            String fechaHoraReserva = fechaReserva.concat(" " + horaReserva);
            if (ConsultasReservas.existeReserva(id) != null) {
                try {
                    Consultas.existeCliente("clientes", new Cliente(user.getIdUsuario()));
                    if (Consultas.existeMesa("mesas", new Mesa(numMesa)) != null) {
                        ConsultasReservas.modificarReserva(id, user.getIdUsuario(), numMesa, Timestamp.valueOf(fechaHoraReserva));
                        listarReservas();
                        limpiarTextos();
                    } else {
                        JOptionPane.showMessageDialog(null, "Mesa no registrada");
                    }
                } catch (JsonSyntaxException e) {
                    JOptionPane.showMessageDialog(null, "Cliente no registrado");
                }
            } else {
                JOptionPane.showMessageDialog(null, "Reserva no registrada");
            }
        } catch (JsonSyntaxException e) {
            JOptionPane.showMessageDialog(null, "Usuario no registrado");
        }
    }//GEN-LAST:event_btnModificarReservaActionPerformed

    private void btnInsertarReservaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnInsertarReservaActionPerformed
        // TODO add your handling code here:
        int id = (int) jSpinnerIdReserva.getValue();
        String fechaReserva = Date.valueOf(datePickerFecha.getDate()).toString();
        String horaReserva = Time.valueOf(timePickerHora.getTime()).toString();
        String fechaHoraReserva = fechaReserva.concat(" " + horaReserva);
        try {
            Usuario user = Consultas.existeUsuario(new Usuario(txtNombreCliente.getText(), txtApellidosCliente.getText(), ""));
            int numMesa = (int) jSpinnerNumMesa.getValue();
            if (ConsultasReservas.existeReserva(id) == null) {
                if (ConsultasReservas.existeReserva(numMesa, Timestamp.valueOf(fechaHoraReserva)) == null) {
                    System.out.println(Timestamp.valueOf(fechaHoraReserva));
                    if (Consultas.existeMesa("mesas", new Mesa(numMesa)) != null) {
                        ConsultasReservas.insertarReserva(id, user.getIdUsuario(), numMesa, Timestamp.valueOf(fechaHoraReserva));
                        listarReservas();
                        limpiarTextos();
                    } else {
                        JOptionPane.showMessageDialog(null, "Mesa no registrada");
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "Mesa ya reservada a esa fecha u hora");
                }
            } else {
                JOptionPane.showMessageDialog(null, "Reserva ya registrada");
            }
        } catch (JsonSyntaxException e) {
            JOptionPane.showMessageDialog(null, "Usuario no registrado");
        }
    }//GEN-LAST:event_btnInsertarReservaActionPerformed

    private void btnEliminarReservaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarReservaActionPerformed
        // TODO add your handling code here:
        int id = (int) jSpinnerIdReserva.getValue();
        if (ConsultasReservas.existeReserva(id) != null) {
            ConsultasReservas.eliminarReserva(id);
            listarReservas();
            limpiarTextos();
        } else {
            JOptionPane.showMessageDialog(null, "Reserva no registrada");
        }
    }//GEN-LAST:event_btnEliminarReservaActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnEliminarReserva;
    private javax.swing.JButton btnInsertarReserva;
    private javax.swing.JButton btnModificarReserva;
    private com.github.lgooddatepicker.components.DatePicker datePickerFecha;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSpinner jSpinnerIdReserva;
    private javax.swing.JSpinner jSpinnerNumMesa;
    private javax.swing.JTable tablaClientes;
    private javax.swing.JTable tablaReservas;
    private com.github.lgooddatepicker.components.TimePicker timePickerHora;
    private javax.swing.JTextField txtApellidosCliente;
    private javax.swing.JTextField txtNombreCliente;
    // End of variables declaration//GEN-END:variables

    private void llenarTablaReservas() {
        modeloTablaReserva.addColumn("IdReserva");
        modeloTablaReserva.addColumn("NombreCliente");
        modeloTablaReserva.addColumn("ApellidosCliente");
        modeloTablaReserva.addColumn("NumMesa");
        modeloTablaReserva.addColumn("FechaReserva");
        modeloTablaReserva.addColumn("HoraReserva");
        tablaReservas.addMouseListener(new MouseAdapter() {
            @Override
            public void mousePressed(MouseEvent evt) {
                jSpinnerIdReserva.setValue(Integer.parseInt(tablaReservas.getValueAt(tablaReservas.getSelectedRow(), 0).toString()));
                txtNombreCliente.setText(tablaReservas.getValueAt(tablaReservas.getSelectedRow(), 1).toString());
                txtApellidosCliente.setText(tablaReservas.getValueAt(tablaReservas.getSelectedRow(), 2).toString());
                jSpinnerNumMesa.setValue(Integer.parseInt(tablaReservas.getValueAt(tablaReservas.getSelectedRow(), 3).toString()));
                datePickerFecha.setDate(LocalDate.parse(tablaReservas.getValueAt(tablaReservas.getSelectedRow(), 4).toString()));
                timePickerHora.setTime(LocalTime.parse(tablaReservas.getValueAt(tablaReservas.getSelectedRow(), 5).toString()));
            }
        });
    }

    private void listarReservas() {
        int numFilas = modeloTablaReserva.getRowCount();
        for (int i = 0; i < numFilas; i++) {
            modeloTablaReserva.removeRow(0);
        }
        ArrayList<Reserva> reservas = ConsultasReservas.listarTodosLasReservas();
        ArrayList<Usuario> usuarios = Consultas.ListarUsuarios();
        for (Reserva r : reservas) {
            for (Usuario u : usuarios) {
                if (r.getIdCliente() == u.getIdUsuario()) {
                    String datos[] = {String.valueOf(r.getIdReserva()), u.getNombre(), u.getApellidos(), String.valueOf(r.getNumMesa()), String.valueOf(r.getFechaHoraReserva().toString().subSequence(0, 10)), String.valueOf(r.getFechaHoraReserva().toString().substring(11, 16))};
                    modeloTablaReserva.addRow(datos);
                }
            }
        }
    }

    private void limpiarTextos() {
        jSpinnerIdReserva.setValue((int) 0);
        txtNombreCliente.setText("");
        txtApellidosCliente.setText("");
        jSpinnerNumMesa.setValue((int) 0);
        datePickerFecha.setDate(LocalDate.now());
        timePickerHora.setTime(LocalTime.now());
    }

    private void listarClientes() {
        modeloTablaClientes.addColumn("Nombre");
        modeloTablaClientes.addColumn("Apellidos");
        modeloTablaClientes.addColumn("Telefono");
        modeloTablaClientes.addColumn("Descuento");
        int id = 0;
        int numFilas = modeloTablaClientes.getRowCount();
        for (int i = 0; i < numFilas; i++) {
            modeloTablaClientes.removeRow(0);
        }
        ArrayList<Usuario> users = Consultas.ListarUsuarios();
        ArrayList<Cliente> clientes = Consultas.ListarClientes();
        for (Usuario u : users) {
            id = u.getIdUsuario();
            for (Cliente c : clientes) {
                if (id == c.getIdCliente()) {
                    String datos[] = {u.getNombre(), u.getApellidos(), u.getTelefono(), String.valueOf(c.getDescuento())};
                    modeloTablaClientes.addRow(datos);
                }
            }
        }
    }

}
